#include<stdio.h>
#include<malloc.h>
typedef struct AVLNode *Position;
typedef Position AVLTree;
typedef struct AVLNode{
    int Data;
    AVLTree Left;
    AVLTree Right;
    int Height;
}AVLNode;
  
int Max(int a,int b){
    if(a>=b)
        return a;
    else
        return b;
}
 
int GetHeight(AVLTree T){
    if (T == NULL)
        return 0;
    else
        return T->Height;
}
 
AVLTree SingleLeftRotation ( AVLTree A ){
    AVLTree B = A->Left;
    A->Left = B->Right;
    B->Right = A;
    A->Height = Max( GetHeight(A->Left), GetHeight(A->Right) ) + 1;
    B->Height = Max( GetHeight(B->Left), A->Height ) + 1;
    return B;
}
 
AVLTree SingleRightRotation (AVLTree A){
    AVLTree B = A->Right;
    A->Right = B->Left;
    B->Left = A;
    A->Height = Max(GetHeight(A->Left),GetHeight(A->Right)) + 1;
    B->Height = Max(GetHeight(B->Right),A->Height) + 1;
    return B;
}
  
AVLTree DoubleLeftRightRotation ( AVLTree A ){
    A->Left = SingleRightRotation(A->Left);
    return SingleLeftRotation(A);
}
 
AVLTree DoubleRightLeftRotation ( AVLTree A ){
    A->Right = SingleLeftRotation(A->Right);
    return SingleRightRotation(A);
}
  
AVLTree Insert( AVLTree T, int X ){
    if ( !T ){
        T = (AVLTree)malloc(sizeof(struct AVLNode));
        T->Data = X;
        T->Height = 0;
        T->Left = T->Right = NULL;
    }
  
    else if ( X < T->Data ) {
        T->Left = Insert( T->Left, X);
        if ( GetHeight(T->Left)-GetHeight(T->Right) == 2 )
            if ( X < T->Left->Data )
               T = SingleLeftRotation(T);  
            else
               T = DoubleLeftRightRotation(T);
    }
      
    else if ( X > T->Data ) {
        T->Right = Insert( T->Right, X );
        if ( GetHeight(T->Left)-GetHeight(T->Right) == -2 )
            if ( X > T->Right->Data )
               T = SingleRightRotation(T);
            else
               T = DoubleRightLeftRotation(T);
    }
    T->Height = Max( GetHeight(T->Left), GetHeight(T->Right) ) + 1;
    return T;
}
 
int PreOrderTraversal(AVLTree T){
    if(T==NULL)
        return 0;
    printf("%d,",T->Data);
    PreOrderTraversal(T->Left);
    PreOrderTraversal(T->Right);
}
 
int main(){
    int i;
    AVLTree T=NULL;
    while(scanf("%d,",&i)!=EOF)
        T=Insert(T,i);
    PreOrderTraversal(T);
    return 0;
}
